package main

import "fmt"

/**
 * @author      weimenghua
 * @time        2022-06-27 14:28
 * @description	闭包

 * 参考资料：https://geekr.dev/posts/go-anonymous-function-and-closure
 * 一、闭包的概念和价值
 * 所谓闭包指的是引用了自由变量(未绑定到特定对象的变量,通常在匿名函数外定义)的函数,被引用的自由变量将和这个函数一同存在,即使已经离开了创造它的上下文环境也不会被释放(比如传递到其他函数或对象中).或者通俗点说,「闭」的意思是「封闭外部状态」,即使外部状态已经失效,闭包内部依然保留了一份从外部引用的变量.
 * 闭包的价值在于可以作为函数对象或者匿名函数,对于类型系统而言,这意味着不仅要表示数据还要表示代码.支持闭包的多数语言都将函数作为第一类对象(firt-class object,有的地方也译作第一级对象,第一类公民等),就是说这些函数可以存储到变量中作为参数传递给其他函数,能够被函数动态创建和返回.
 * 二、Go 语言中闭包的应用场景
 * 1、保证局部变量的安全性,闭包内部声明的局部变量无法从外部修改,从而确保了安全性(类似类的私有属性)
 * 2、将匿名函数作为参数
 * 3、将匿名函数作为返回值
 */

func demo1() {
	//变量 f 指向的闭包引用了局部变量 i 和 j,i 在闭包内部定义,其值被隔离,不能从外部修改,而变量 j 在闭包外部定义,所以可以从外部修改,闭包持有的只是其引用.
	var j int = 1

	f := func() {
		var i int = 1
		fmt.Printf("i, j: %d, %d\n", i, j)
	}

	f()
	j += 2
	f()
}

func main() {
	demo1()
}
